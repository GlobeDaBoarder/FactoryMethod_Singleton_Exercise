TODO: Creational Patterns: Factory Method, Singleton
----------------------------------------------------------------------

1. Factory Method Pattern
----------------------------------------------------------------------
* Bitte erstellen Sie ein Interface mit dem Namen 'Factory' welches
Factory Methoden zur Instantiierung folgender Klassen spezifiziert:

	User 	
	Group

* Implementieren Sie dieses Interface in der Klasse 'FactoryImpl'

HINWEISE:
* ACHTEN Sie darauf, dass die Create-Methoden für User und Group auch
für das Einfügen der IDs zuständig sind (der Wert einer ID wird von
der Klasse 'IntegerSequence' erstellt).

* Schauen Sie sich auch unbedingt die Tests an, falls Sie einen Hinweis
darauf benötigen welche Signatur die Create-Methoden haben müssen ;-)

Sie können Ihre Implementierungen mit der Klasse 'FactoryImplTest'
überprüfen.


2. Singleton Pattern
----------------------------------------------------------------------
* Erzeugen Sie eine neue Klasse 'FactorySingletonImpl' die Sie als
beliebiges Singleton implementieren.
Je 'cooler' das Singleton desto mehr BONUS-Punkte bekommen Sie...
Natürlich muss auch ihr 'FactorySingletonImpl' die Factory Methoden
implementieren. Der Grund warum sie eine eigene Singleton Klasse
implementieren sollen ist, dass nun sauber getrennt getestet werden
kann (außerdem kümmern wir uns in diesem Fall auch NICHT um das
Problem 'Code Duplication').

* Sie können Ihre Singleton-Implementierungen mit der Klasse
'FactorySingletonTest' überprüfen. DAZU müssen Sie allerdings ZUVOR
die überschriebene Methode 'getFactory()' entsprechend ihrer
Singleton-Implementierung anpassen.

HINWEISE:
Achten Sie darauf dass Sie tatsächlich nur eine Instanz von
'FactorySingeltonImpl' erstellen können, egal welchen Singleton-Typ
Sie gewählt haben.

Gutes Gelingen!


                    ***********************
                    *** ENGLISH version ***
                    ***********************
----------------------------------------------------------------------

PART 1. Factory Method Pattern:
----------------------------------------------------------------------
* Please, create an Interface with the name "Factory" which provides
factory methods to create instances of the following classes:

	User 	
	Group

* Please, implement this interface in the class 'FactoryImpl'

HINT:
* Please check, that the create-methods for User and Group are responsible
for the setting of the IDs (the value of an ID is generated by
'IntegerSequence' class.

* Check the tests if you need some hints which signature the
create-methods need.

* You can check your implementation with the test 'FactoryImplTest'.


2. Singleton Pattern
----------------------------------------------------------------------
* Create a new class 'FactorySingletonImpl' which you can realize as a
singleton of your liking. The cooler the singleton, the more bonus
you get...
Of course your 'FactorySingletonImpl' has to implement the factory methods.
The reason why you should implement an own singleton class, is that it
is clearly separated and can be tested in isolation (we don't mind code
duplication in this case).

* You can test your implementation with the 'FactoryImplSingletonTest' class.
KEEP in mind that you have to adapt the overridden method 'getFactory()'
according to your singleton implementation - either only public access
of a constant INSTANCE, or a method call. That's the only stuff you must
potentially change in the test class.

HINT:
* PLEASE check that there is ONLY a single instance of your
'FactorySingletonImpl' no matter which kind of singleton you chose to
implement.





